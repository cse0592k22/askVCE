# Generated by Django 3.2.4 on 2021-06-11 03:27

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('user_name', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('middle_name', models.CharField(blank=True, max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dob', models.DateField(verbose_name='date of birth')),
                ('grad_year', models.IntegerField(validators=[django.core.validators.RegexValidator(message='Enter valid grad_year: ', regex='2\\d{3}')])),
                ('htno', models.CharField(max_length=15, unique=True, validators=[django.core.validators.RegexValidator(message='Enter valid college htno: ', regex='1602-\\d{2}-7\\d{2}-\\d{3}')])),
                ('phone', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Enter your phone no: ', regex='\\d{10}')])),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('usefullness_score', models.IntegerField(default=3)),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField(default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='AnswerFlag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('nsfw', 'Adult/Violent Content (Not Safe For Work)'), ('prom', 'Paid Promotion'), ('hurt', 'Hurting Sentiments'), ('less', 'Useless or not helpful')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(editable=False, max_length=4)),
                ('name', models.CharField(editable=False, max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('body', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('scope', models.CharField(choices=[('branch_grad_year', 'Same Brach Same Year'), ('grad_year', 'Same Year'), ('college', 'Entire College')], default='college', max_length=50)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='QuestionFlag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('nsfw', 'Adult/Violent Content (Not Safe For Work)'), ('prom', 'Paid Promotion'), ('hurt', 'Hurting Sentiments'), ('less', 'Useles or not helpful')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('slug', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.AddIndex(
            model_name='tag',
            index=models.Index(fields=['slug'], name='slug_idx'),
        ),
        migrations.AddField(
            model_name='questionflag',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.question'),
        ),
        migrations.AddField(
            model_name='questionflag',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='question',
            name='tags',
            field=models.ManyToManyField(to='api.Tag'),
        ),
        migrations.AddField(
            model_name='question',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='question',
            name='users_flagged',
            field=models.ManyToManyField(related_name='questions_flagged', through='api.QuestionFlag', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='question',
            name='votes',
            field=models.ManyToManyField(blank=True, related_name='questions_upvoted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='department',
            index=models.Index(fields=['code'], name='code_idx'),
        ),
        migrations.AddField(
            model_name='answerflag',
            name='answer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.answer'),
        ),
        migrations.AddField(
            model_name='answerflag',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.question'),
        ),
        migrations.AddField(
            model_name='answer',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='answer',
            name='users_flagged',
            field=models.ManyToManyField(related_name='answers_flagged', through='api.AnswerFlag', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='answer',
            name='votes',
            field=models.ManyToManyField(blank=True, related_name='answers_upvoted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='department',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.department'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='questionflag',
            index=models.Index(fields=['user'], name='question_flag_user_idx'),
        ),
        migrations.AddIndex(
            model_name='questionflag',
            index=models.Index(fields=['question'], name='question_flag_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='questionflag',
            unique_together={('user', 'question')},
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['user'], name='question_user_idx'),
        ),
        migrations.AddIndex(
            model_name='answerflag',
            index=models.Index(fields=['user'], name='answer_flag_user_idx'),
        ),
        migrations.AddIndex(
            model_name='answerflag',
            index=models.Index(fields=['answer'], name='answer_flag_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='answerflag',
            unique_together={('user', 'answer')},
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['user'], name='answer_user_idx'),
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['question'], name='answer_question_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['htno'], name='htno_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['phone'], name='phone_idx'),
        ),
    ]
